{"ast":null,"code":"var _jsxFileName = \"/Users/franciscovaz/Documents/Projetos/GoStack-Bootcamp/github-react/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\nimport { Loading } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match\n    } = this.props;\n    const repoName = decodeURIComponent(match.params.repository);\n    const [repository, issues] = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]);\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const {\n      repository,\n      issues,\n      loading\n    } = this.state;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"A carregar\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Owner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })));\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/franciscovaz/Documents/Projetos/GoStack-Bootcamp/github-react/src/pages/Repository/index.js"],"names":["React","Component","PropTypes","api","Container","Loading","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","per_page","setState","data","render","owner","avatar_url","login","propTypes","shape","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,eAAe,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAEhDM,KAFgD,GAExC;AACNC,MAAAA,UAAU,EAAE,EADN;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,OAAO,EAAE;AAHH,KAFwC;AAAA;;AAQhD,QAAMC,iBAAN,GAA0B;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AAEA,UAAMC,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaR,UAAd,CAAnC;AAEA,UAAM,CAACA,UAAD,EAAaC,MAAb,IAAuB,MAAMQ,OAAO,CAACC,GAAR,CAAY,CAC7Cf,GAAG,CAACgB,GAAJ,CAAS,UAASL,QAAS,EAA3B,CAD6C,EAE7CX,GAAG,CAACgB,GAAJ,CAAS,UAASL,QAAS,SAA3B,EAAqC;AACnCE,MAAAA,MAAM,EAAE;AACNT,QAAAA,KAAK,EAAE,MADD;AAENa,QAAAA,QAAQ,EAAE;AAFJ;AAD2B,KAArC,CAF6C,CAAZ,CAAnC;AAUA,SAAKC,QAAL,CAAc;AACZb,MAAAA,UAAU,EAAEA,UAAU,CAACc,IADX;AAEZb,MAAAA,MAAM,EAAEA,MAAM,CAACa,IAFH;AAGZZ,MAAAA,OAAO,EAAE;AAHG,KAAd;AAKD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA;AAAtB,QAAkC,KAAKH,KAA7C;;AAEA,QAAIG,OAAJ,EAAa;AACX,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,WACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAEF,UAAU,CAACgB,KAAX,CAAiBC,UAA3B;AAAuC,MAAA,GAAG,EAAEjB,UAAU,CAACgB,KAAX,CAAiBE,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;;AA3C+C;AA8ClDpB,UAAU,CAACqB,SAAX,GAAuB;AACrBf,EAAAA,KAAK,EAAEV,SAAS,CAAC0B,KAAV,CAAgB;AACrBZ,IAAAA,MAAM,EAAEd,SAAS,CAAC0B,KAAV,CAAgB;AACtBpB,MAAAA,UAAU,EAAEN,SAAS,CAAC2B;AADA,KAAhB;AADa,GAAhB,EAIJC;AALkB,CAAvB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\n\nimport Container from '../../components/Container';\nimport { Loading } from './styles';\n\nexport default class Repository extends Component {\n  // eslint-disable-next-line react/state-in-constructor\n  state = {\n    repository: {},\n    issues: [],\n    loading: true,\n  };\n\n  async componentDidMount() {\n    const { match } = this.props;\n\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        params: {\n          state: 'open',\n          per_page: 5,\n        },\n      }),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { repository, issues, loading } = this.state;\n\n    if (loading) {\n      return <Loading>A carregar</Loading>;\n    }\n    return (\n      <Container>\n        <Owner>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n        </Owner>\n      </Container>\n    );\n  }\n}\n\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string,\n    }),\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}